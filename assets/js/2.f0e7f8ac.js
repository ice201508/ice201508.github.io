(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{416:function(t,a,s){t.exports=s.p+"assets/img/100(1).1d0ddd10.png"},417:function(t,a,s){t.exports=s.p+"assets/img/100(2).c6280212.png"},418:function(t,a,s){t.exports=s.p+"assets/img/100(3).b795c100.png"},419:function(t,a,s){t.exports=s.p+"assets/img/100(4).90225225.png"},420:function(t,a,s){t.exports=s.p+"assets/img/100(5).84ef3029.png"},421:function(t,a,s){t.exports=s.p+"assets/img/100(6).21844bbd.png"},422:function(t,a,s){t.exports=s.p+"assets/img/100(7).c5afef70.png"},423:function(t,a,s){t.exports=s.p+"assets/img/100(8).f050bcfa.png"},424:function(t,a,s){t.exports=s.p+"assets/img/100(9).c4763c0a.png"},425:function(t,a,s){t.exports=s.p+"assets/img/100(10).fb9f2454.png"},426:function(t,a,s){t.exports=s.p+"assets/img/100(11).b6c13f61.png"},427:function(t,a,s){t.exports=s.p+"assets/img/100(12).afa2eb3d.png"},428:function(t,a,s){t.exports=s.p+"assets/img/100(13).ad9a154c.png"},429:function(t,a,s){t.exports=s.p+"assets/img/100(14).755a072e.png"},430:function(t,a,s){t.exports=s.p+"assets/img/100(15).92c0cbdb.png"},431:function(t,a,s){t.exports=s.p+"assets/img/100(16).a5c4dd81.png"},432:function(t,a,s){t.exports=s.p+"assets/img/100(17).25820192.png"},433:function(t,a,s){t.exports=s.p+"assets/img/100(19).943b442d.png"},434:function(t,a,s){t.exports=s.p+"assets/img/100(20).de003f18.png"},435:function(t,a,s){t.exports=s.p+"assets/img/100(21).61b2f7f2.png"},436:function(t,a,s){t.exports=s.p+"assets/img/100(24).5956dce0.png"},437:function(t,a,s){t.exports=s.p+"assets/img/100(26).9066472c.png"},438:function(t,a,s){t.exports=s.p+"assets/img/100(27).ffef5600.png"},439:function(t,a,s){t.exports=s.p+"assets/img/100(28).5a1c0d78.png"},440:function(t,a,s){t.exports=s.p+"assets/img/100(29).6475dd55.png"},441:function(t,a,s){t.exports=s.p+"assets/img/100(30).f7014d1f.png"},442:function(t,a,s){t.exports=s.p+"assets/img/100(31).b014889e.png"},443:function(t,a,s){t.exports=s.p+"assets/img/100(32).1f10d833.png"},444:function(t,a,s){t.exports=s.p+"assets/img/100(33).5a01c547.png"},445:function(t,a,s){t.exports=s.p+"assets/img/100(34).3d6a7d62.png"},446:function(t,a,s){t.exports=s.p+"assets/img/100(35).a89cf0c8.png"},447:function(t,a,s){t.exports=s.p+"assets/img/100(36).4e9202a3.png"},448:function(t,a,s){t.exports=s.p+"assets/img/100(37).bd7a5df7.png"},449:function(t,a,s){t.exports=s.p+"assets/img/100(38).339a32a5.png"},450:function(t,a,s){t.exports=s.p+"assets/img/100(39).0e105ca3.png"},451:function(t,a,s){t.exports=s.p+"assets/img/100(41).b06a4fd5.png"},452:function(t,a,s){t.exports=s.p+"assets/img/100(43).a512c359.png"},453:function(t,a,s){t.exports=s.p+"assets/img/100(44).ecd64c3f.png"},454:function(t,a,s){t.exports=s.p+"assets/img/100(45).5fa47c44.png"},455:function(t,a,s){t.exports=s.p+"assets/img/100(46).bdc486ab.png"},495:function(t,a,s){"use strict";s.r(a);var r=s(10),_=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"认识typescript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识typescript"}},[t._v("#")]),t._v(" 认识TypeScript")]),t._v(" "),a("h2",{attrs:{id:"_1-什么是ts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是ts"}},[t._v("#")]),t._v(" 1. 什么是TS")]),t._v(" "),a("p",[t._v("TypeScript 是具有类型语法的 JavaScript，是一门强类型的编程语言\n"),a("img",{attrs:{src:s(416),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_2-带来的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-带来的好处"}},[t._v("#")]),t._v(" 2. 带来的好处")]),t._v(" "),a("p",[t._v("1- 静态类型检查，提前发现代码错误")]),t._v(" "),a("p",[a("img",{attrs:{src:s(417),alt:"image.png"}}),t._v(" "),a("img",{attrs:{src:s(418),alt:"image.png"}}),t._v("\n2- 良好的代码提示，提升开发效率")]),t._v(" "),a("p",[a("img",{attrs:{src:s(419),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_3-什么时候用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么时候用"}},[t._v("#")]),t._v(" 3. 什么时候用")]),t._v(" "),a("p",[t._v("以下是来自社区的一些建议：")]),t._v(" "),a("ol",[a("li",[t._v("你做的是一个大型的应用吗？")]),t._v(" "),a("li",[t._v("是否是团队协作开发模式？")]),t._v(" "),a("li",[t._v("是否在编写通用的代码库？（Vue3 / ElementPlus...）")])]),t._v(" "),a("p",[t._v("结论：TypeScript不是万能的，技术的选型不能脱离具体的业务和应用场景，TS更加适合用来开发中大型的项目，或者是通用的JS代码库，再或者是团队协作开发的场景")]),t._v(" "),a("h1",{attrs:{id:"搭建ts编译环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建ts编译环境"}},[t._v("#")]),t._v(" 搭建TS编译环境")]),t._v(" "),a("h2",{attrs:{id:"_1-为什么需要编译环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么需要编译环境"}},[t._v("#")]),t._v(" 1. 为什么需要编译环境")]),t._v(" "),a("p",[t._v("TypeScript编写的代码是无法直接在js引擎（浏览器/NodeJs）中运行的，最终还需要经过编译变成js代码才可以正常运行\n"),a("img",{attrs:{src:s(420),alt:"image.png"}})]),t._v(" "),a("p",[t._v("带来的好处：既可以再开发时使用TS编写代码享受类型带来的好处，同时保证实际运行的还是JS代码")]),t._v(" "),a("h2",{attrs:{id:"_2-搭建手动编译环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-搭建手动编译环境"}},[t._v("#")]),t._v(" 2. 搭建手动编译环境")]),t._v(" "),a("ol",[a("li",[t._v("全局安装 typescript 包（编译引擎）-> 注册 tsc 命令\nnpm install -g typescript")]),t._v(" "),a("li",[t._v("新增 hello.ts 文件，  执行 tsc hello.ts 命令生成hello.js文件")]),t._v(" "),a("li",[t._v("执行 node hello.js 运行js文件查看效果")])]),t._v(" "),a("h2",{attrs:{id:"_3-搭建工程化下的自动编译环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-搭建工程化下的自动编译环境"}},[t._v("#")]),t._v(" 3. 搭建工程化下的自动编译环境")]),t._v(" "),a("p",[t._v("基于工程化的TS开发模式（webpack / vite），TS的编译环境已经内置了，无需手动安装配置，通过以下命令即可创建一个最基础的自动化的TS编译环境")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" create vite@latest   ts-pro  -- "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--template")]),t._v(" vanilla-ts\n")])])]),a("p",[t._v("命令说明：")]),t._v(" "),a("ol",[a("li",[t._v("npm create vite"),a("a",{attrs:{href:"/latest"}},[t._v("@latest ")]),t._v("   使用最新版本的vite创建项目")]),t._v(" "),a("li",[t._v("ts-pro   项目名称")]),t._v(" "),a("li",[t._v("-- --template vanilla-ts     创建项目使用的模板为原生ts模板")])]),t._v(" "),a("h1",{attrs:{id:"类型注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型注解"}},[t._v("#")]),t._v(" 类型注解")]),t._v(" "),a("h2",{attrs:{id:"_1-ts类型注解是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-ts类型注解是什么"}},[t._v("#")]),t._v(" 1. TS类型注解是什么")]),t._v(" "),a("p",[t._v("概念：类型注解指的是给变量添加类型约束，使变量只能被赋值为约定好的类型, 同时可以有相关的类型提示")]),t._v(" "),a("p",[a("img",{attrs:{src:s(421),alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明：:string 就是类型注解， 约束变量 message 只能被赋值为string 类型, 同时可以有string类型的相关提示")]),t._v(" "),a("h2",{attrs:{id:"_2-ts支持的常用类型注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-ts支持的常用类型注解"}},[t._v("#")]),t._v(" 2. TS支持的常用类型注解")]),t._v(" "),a("p",[a("strong",[t._v("JS已有类型")])]),t._v(" "),a("ol",[a("li",[t._v("简单类型\nnumber  string  boolean  null  undefined")]),t._v(" "),a("li",[t._v("复杂类型\n数组   函数\n"),a("strong",[t._v("TS新增类型")]),t._v("\n联合类型、类型别名、接口（interface）、字面量类型、泛型、枚举、void、any等")])]),t._v(" "),a("h2",{attrs:{id:"_3-简单类型如何进行类型注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-简单类型如何进行类型注解"}},[t._v("#")]),t._v(" 3. 简单类型如何进行类型注解")]),t._v(" "),a("p",[t._v("简单类型的注解完全按照 JS的类型（全小写的格式）来书写即可")]),t._v(" "),a("p",[a("img",{attrs:{src:s(422),alt:"image.png"}})]),t._v(" "),a("h1",{attrs:{id:"数组类型注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组类型注解"}},[t._v("#")]),t._v(" 数组类型注解")]),t._v(" "),a("h2",{attrs:{id:"_1-有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-有什么用"}},[t._v("#")]),t._v(" 1. 有什么用")]),t._v(" "),a("p",[t._v("变量被注解为数组类型之后，有俩点好处：\n1- 不仅可以限制变量类型为数组而且可以限制数组成员的类型\n"),a("img",{attrs:{src:s(423),alt:"image.png"}})]),t._v(" "),a("p",[t._v("2- 编码时不仅可以提示数组的属性和方法而且可以提示成员的属性和方法\n"),a("img",{attrs:{src:s(424),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_2-如何注解数组类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何注解数组类型"}},[t._v("#")]),t._v(" 2. 如何注解数组类型")]),t._v(" "),a("p",[t._v("使用数据类型对变量进行类型注解有俩种语法")]),t._v(" "),a("p",[a("img",{attrs:{src:s(425),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_3-思考题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-思考题"}},[t._v("#")]),t._v(" 3. 思考题")]),t._v(" "),a("p",[t._v("有一个变量arr, 要求用俩种方式添加类型注解，使其只能赋值一个成员都是字符串的数组?")]),t._v(" "),a("h1",{attrs:{id:"联合类型和别名类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合类型和别名类型"}},[t._v("#")]),t._v(" 联合类型和别名类型")]),t._v(" "),a("h2",{attrs:{id:"_1-联合类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-联合类型"}},[t._v("#")]),t._v(" 1. 联合类型")]),t._v(" "),a("p",[t._v("概念：将多个类型合并为一个类型对变量进行注解\n需求：如何注解数组类型可以让数组中既可以存放string类型的成员也可以存放number类型的成员？\n"),a("img",{attrs:{src:s(426),alt:"image.png"}}),t._v("\n说明：string | number 表示arr3中的成员既可以是string类型也可以是number类型")]),t._v(" "),a("h2",{attrs:{id:"_2-类型别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-类型别名"}},[t._v("#")]),t._v(" 2. 类型别名")]),t._v(" "),a("p",[t._v("概念：通过 type关键词 给写起来较复杂的类型起一个其它的名字，用来简化和复用类型\n"),a("img",{attrs:{src:s(427),alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明：type 类型别名 = 具体类型  其中类型别名的命名采用规范的大驼峰格式")]),t._v(" "),a("h2",{attrs:{id:"_3-思考题-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-思考题-2"}},[t._v("#")]),t._v(" 3. 思考题")]),t._v(" "),a("p",[t._v("有一个变量foo,要求添加类型注解，使其既可以赋值为number类型，也可以赋值为成员都是字符串的数组?")]),t._v(" "),a("h1",{attrs:{id:"函数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数类型"}},[t._v("#")]),t._v(" 函数类型")]),t._v(" "),a("h2",{attrs:{id:"_1-基础使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础使用"}},[t._v("#")]),t._v(" 1. 基础使用")]),t._v(" "),a("p",[t._v("概念：函数类型是指给函数添加类型注解，本质上就是给函数的参数和返回值添加类型约束")]),t._v(" "),a("p",[a("img",{attrs:{src:s(428),alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明：")]),t._v(" "),a("ol",[a("li",[t._v("函数参数注解类型之后不但限制了参数的类型还限制了参数为必填")]),t._v(" "),a("li",[t._v("函数返回值注解类型之后限制了该函数内部return出去的值必须满足类型要求")])]),t._v(" "),a("p",[t._v("好处：")]),t._v(" "),a("ol",[a("li",[t._v("避免因为参数不对导致的函数内部逻辑错误     2.  对函数起到说明的作用")])]),t._v(" "),a("h2",{attrs:{id:"_2-函数表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数表达式"}},[t._v("#")]),t._v(" 2. 函数表达式")]),t._v(" "),a("p",[t._v("函数表达式的类型注解有俩种方式，参数和返回值分开注解和函数整体注解")]),t._v(" "),a("p",[t._v("1- 参数和返回值分开注解")]),t._v(" "),a("p",[a("img",{attrs:{src:s(429),alt:"image.png"}})]),t._v(" "),a("p",[t._v("2-函数整体注解（只针对于函数表达式）")]),t._v(" "),a("p",[a("img",{attrs:{src:s(430),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_3-可选参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-可选参数"}},[t._v("#")]),t._v(" 3. 可选参数")]),t._v(" "),a("p",[t._v("概念：可选参数表示当前参数可传可不传，一旦传递实参必须保证参数类型正确")]),t._v(" "),a("p",[a("img",{attrs:{src:s(431),alt:"image.png"}}),t._v("\n说明：lastName参数表示可选参数，可传可不传，一旦传递实参必须保证类型为string类型")]),t._v(" "),a("h2",{attrs:{id:"_4-无返回值-void"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-无返回值-void"}},[t._v("#")]),t._v(" 4. 无返回值 - void")]),t._v(" "),a("p",[t._v("概念：JS中的有些函数只有功能没有返回值，此时使用void进行返回值注解，明确表示函数没有函数值")]),t._v(" "),a("p",[a("img",{attrs:{src:s(432),alt:"image.png"}})]),t._v(" "),a("p",[t._v("注意事项：在JS中如何没有返回值，默认返回的是undefined, 在TS中 void和undefined不是一回事，undefined在TS中是一种明确的简单类型，如果指定返回值为undefined，那返回值必须是undefined类型")]),t._v(" "),a("h2",{attrs:{id:"_5-思考题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-思考题"}},[t._v("#")]),t._v(" 5. 思考题")]),t._v(" "),a("p",[t._v("编写一个arr2Str函数，作用为把数组转换为字符串，其中数组中既可以包含字符串和数字，分隔符也可以进行自定义，类型为字符串类型，使用样例：")]),t._v(" "),a("ol",[a("li",[t._v("arr2Str( [1, 2, 3] ,  '-' )    ->   '1-2-3'")]),t._v(" "),a("li",[t._v("arr2Str( [‘4’, ’5’] , ’&’ )  -> '4&5'")])]),t._v(" "),a("h1",{attrs:{id:"interface接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface接口"}},[t._v("#")]),t._v(" interface接口")]),t._v(" "),a("h2",{attrs:{id:"_1-接口类型的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-接口类型的作用"}},[t._v("#")]),t._v(" 1. 接口类型的作用")]),t._v(" "),a("p",[t._v("作用: 在TS中使用interface接口来描述对象数据的类型（常用于给对象的属性和方法添加类型约束）")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"assets/100(18.png",alt:"image.png"}}),t._v("\n说明：一旦注解接口类型之后对象的属性和方法类型都需要满足要求，属性不能多也不能少\n"),a("h2",{attrs:{id:"_2-典型场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-典型场景"}},[t._v("#")]),t._v(" 2. 典型场景")]),t._v(" "),a("p",[t._v("场景：在常规业务开发中比较典型的就是前后端数据通信的场景")]),t._v(" "),a("ol",[a("li",[t._v("前端向后端发送数据：收集表单对象数据时的类型校验")]),t._v(" "),a("li",[t._v("前端使用后端数据：渲染后端对象数组列表时的智能提示")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(433),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_3-接口的可选设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-接口的可选设置"}},[t._v("#")]),t._v(" 3. 接口的可选设置")]),t._v(" "),a("p",[t._v("概念: 通过？对属性进行可选标注，赋值的时候该属性可以缺失，如果有值必须保证类型满足要求\n"),a("img",{attrs:{src:s(434),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_4-接口的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-接口的继承"}},[t._v("#")]),t._v(" 4. 接口的继承")]),t._v(" "),a("p",[t._v("概念：接口的很多属性是可以进行类型复用的，使用 extends 实现接口继承,实现类型复用\n"),a("img",{attrs:{src:s(435),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_5-思考题-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-思考题-2"}},[t._v("#")]),t._v(" 5. 思考题")]),t._v(" "),a("p",[t._v("通常我们的后端接口返回的数据格式具有一定的规范，比如经常见到的response对象，如下，尝试使用interface接口定义其类型")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"assets/100(22.png",alt:"image.png"}}),t._v(" "),a("h1",{attrs:{id:"type注解对象类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type注解对象类型"}},[t._v("#")]),t._v(" type注解对象类型")]),t._v(" "),a("h2",{attrs:{id:"_1-注解对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-注解对象"}},[t._v("#")]),t._v(" 1. 注解对象")]),t._v(" "),a("p",[t._v("概念：在TS中对于对象数据的类型注解，除了使用interface之外还可以使用类型别名来进行注解，作用相似")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"assets/100(23.png",alt:"image.png"}}),t._v(" "),a("h2",{attrs:{id:"_2-type-交叉类型模拟继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-type-交叉类型模拟继承"}},[t._v("#")]),t._v(" 2. type + 交叉类型模拟继承")]),t._v(" "),a("p",[t._v("类型别名配合交叉类型（&）可以模拟继承，同样可以实现类型复用")]),t._v(" "),a("p",[a("img",{attrs:{src:s(436),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_3-interface-对比-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-interface-对比-type"}},[t._v("#")]),t._v(" 3. interface 对比 type")]),t._v(" "),a("p",[t._v("相同点")]),t._v(" "),a("ol",[a("li",[t._v("都能描述对象类型")]),t._v(" "),a("li",[t._v("都能实现继承，interface使用extends, type配合交叉类型")])]),t._v(" "),a("p",[t._v("不同点")]),t._v(" "),a("ol",[a("li",[t._v("type除了能描述对象还可以用来自定义其他类型")]),t._v(" "),a("li",[t._v("同名的interface会合并（属性取并集，不能出现类型冲突），同名type会报错")])]),t._v(" "),a("p",[t._v("在注解对象类型的场景下非常相似，推荐大家一律使用type, type更加灵活")]),t._v(" "),a("h2",{attrs:{id:"_4-思考题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-思考题"}},[t._v("#")]),t._v(" 4. 思考题")]),t._v(" "),a("p",[t._v("还是我们熟悉的response对象，如下，尝试使用type定义其类型")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"assets/100(25.png",alt:"image.png"}}),t._v(" "),a("h1",{attrs:{id:"字面量类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量类型"}},[t._v("#")]),t._v(" 字面量类型")]),t._v(" "),a("h2",{attrs:{id:"_1-什么是字面量类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是字面量类型"}},[t._v("#")]),t._v(" 1. 什么是字面量类型")]),t._v(" "),a("p",[t._v("概念：使用 js字面量 作为类型对变量进行类型注解，这种类型就是字面量类型, 字面量类型比普通的类型更加精确")]),t._v(" "),a("p",[a("img",{attrs:{src:s(437),alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明：除了上面的数字字面量，js里常用的字符串字面量，数组字面量，对象字面量等都可以当成类型使用")]),t._v(" "),a("h2",{attrs:{id:"_2-字面量类型的实际应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-字面量类型的实际应用"}},[t._v("#")]),t._v(" 2. 字面量类型的实际应用")]),t._v(" "),a("p",[t._v("字面量类型在实际应用中通常和联合类型结合起来使用，提供一个精确的可选范围\n场景1：性别只能是 ’男‘ 和 ’女‘，就可以采用联合类型配合字面量的类型定义方案\n"),a("img",{attrs:{src:s(438),alt:"image.png"}})]),t._v(" "),a("p",[t._v("场景2：ElementUI中的el-button组件按钮的type属性\n"),a("img",{attrs:{src:s(439),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_3-字面量类型与const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-字面量类型与const"}},[t._v("#")]),t._v(" 3. 字面量类型与const")]),t._v(" "),a("p",[t._v("思考一下下面的 str1 和 str2，TS推断出来的类型分别是什么？\n"),a("img",{attrs:{src:s(440),alt:"image.png"}}),t._v("\n说明：const声明的变量称之为常量，常量是不可以进行重新赋值的，所以str2推断出来的是字面量类型而不是string类型")]),t._v(" "),a("h2",{attrs:{id:"_4-思考题-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-思考题-2"}},[t._v("#")]),t._v(" 4. 思考题")]),t._v(" "),a("p",[t._v("还是我们熟悉的后端返回数据，这一次业务code码有多种情况1001、 1002、 1003，尝试改写类型满足要求\n"),a("img",{attrs:{src:s(441),alt:"image.png"}})]),t._v(" "),a("h1",{attrs:{id:"类型推论和any类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型推论和any类型"}},[t._v("#")]),t._v(" 类型推论和any类型")]),t._v(" "),a("h2",{attrs:{id:"_1-类型推论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-类型推论"}},[t._v("#")]),t._v(" 1. 类型推论")]),t._v(" "),a("p",[t._v("概念：在 TS 中存在类型推断机制，在没有给变量添加类型注解的情况下，TS 也会给变量提供类型，以下是发生类型推断的几个场景")]),t._v(" "),a("ul",[a("li",[t._v("声明变量并赋值时")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(442),alt:"image.png"}})]),t._v(" "),a("ul",[a("li",[t._v("决定函数返回值时")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(443),alt:"image.png"}})]),t._v(" "),a("p",[t._v("一些小建议")]),t._v(" "),a("ol",[a("li",[t._v("开发项目的时候，能省略类型注解的地方就省略")]),t._v(" "),a("li",[t._v("刚开始学TS，建议对所有类型都加上，先熟悉")]),t._v(" "),a("li",[t._v("鼠标放至变量上，VsCode 自动提示类型")])]),t._v(" "),a("h2",{attrs:{id:"_2-any类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-any类型"}},[t._v("#")]),t._v(" 2. any类型")]),t._v(" "),a("p",[t._v("作用：变量被注解为any类型之后，TS会忽略类型检查，错误的类型赋值不会报错，也不会有任何提示")]),t._v(" "),a("p",[a("img",{attrs:{src:s(444),alt:"image.png"}})]),t._v(" "),a("p",[t._v("注意：any 的使用越多，程序可能出现的漏洞越多，因此不推荐使用 any 类型，尽量避免使用")]),t._v(" "),a("h2",{attrs:{id:"_3-类型断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-类型断言"}},[t._v("#")]),t._v(" 3. 类型断言")]),t._v(" "),a("p",[t._v("作用：有些时候开发者比TS本身更清楚当前的类型是什么，可以使用断言（as）让类型更加精确和具体\n需求：获取页面中的id为link的a元素，尝试通过点语法访问href属性")]),t._v(" "),a("p",[a("img",{attrs:{src:s(445),alt:"image.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(446),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_4-类型断言的注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-类型断言的注意事项"}},[t._v("#")]),t._v(" 4. 类型断言的注意事项")]),t._v(" "),a("p",[t._v("类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，滥用类型断言可能会导致运行时错误")]),t._v(" "),a("p",[a("img",{attrs:{src:s(447),alt:"image.png"}})]),t._v(" "),a("p",[t._v("说明：利用断言把foo变量的类型指定为精确的number，但是传参的时候还是可以传递number类型或者string类型均满足类型要求，但是传递string会导致运行时错误")]),t._v(" "),a("h1",{attrs:{id:"泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),a("h2",{attrs:{id:"_1-什么是泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是泛型"}},[t._v("#")]),t._v(" 1. 什么是泛型")]),t._v(" "),a("p",[t._v("概念：泛型（Generics）是指在定义接口、函数等类型的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性, 使用泛型可以复用类型并且让类型更加灵活\n思考：下面的俩种数据结构如何使用interface接口实现类型注解？这样做有何问题？\n"),a("img",{attrs:{src:s(448),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_2-泛型接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-泛型接口"}},[t._v("#")]),t._v(" 2. 泛型接口")]),t._v(" "),a("p",[t._v("语法：在接口类型的名称后面使用"),a("code",[t._v("<T>")]),t._v("即可声明一个泛型参数，接口里的其他成员都能使用该参数的类型")]),t._v(" "),a("p",[a("img",{attrs:{src:s(449),alt:"image.png"}})]),t._v(" "),a("p",[t._v("通用思路：")]),t._v(" "),a("ol",[a("li",[t._v("找到可变的类型部分通过泛型抽象为泛型参数（定义参数）")]),t._v(" "),a("li",[t._v("在使用泛型的时候，把具体类型传入到泛型参数位置 （传参）")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(450),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_3-泛型别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-泛型别名"}},[t._v("#")]),t._v(" 3. 泛型别名")]),t._v(" "),a("p",[t._v("语法：在类型别名type的后面使用"),a("code",[t._v("<T>")]),t._v("即可声明一个泛型参数，接口里的其他成员都能使用该参数的类型")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"assets/100(40.png",alt:"image.png"}}),t._v(" "),a("p",[t._v("需求：使用泛型别名重构ResData案例\n"),a("img",{attrs:{src:s(451),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_4-泛型函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-泛型函数"}},[t._v("#")]),t._v(" 4. 泛型函数")]),t._v(" "),a("p",[t._v("语法：在函数名称的后面使用"),a("code",[t._v("<T>")]),t._v("即可声明一个泛型参数，整个函数中（参数、返回值、函数体）的变量都可以使用该参数的类型")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"assets/100(42.png",alt:"image.png"}}),t._v(" "),a("p",[t._v("需求：设置一个函数 createArray，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值(多种类型)\n"),a("img",{attrs:{src:s(452),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_5-泛型约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-泛型约束"}},[t._v("#")]),t._v(" 5. 泛型约束")]),t._v(" "),a("p",[t._v("作用：泛型的特点就是灵活不确定，有些时候泛型函数的内部需要访问一些特定类型的数据才有的属性，此时会有类型错误，需要通过泛型约束解决")]),t._v(" "),a("p",[a("img",{attrs:{src:s(453),alt:"image.png"}})]),t._v(" "),a("p",[t._v("添加约束")]),t._v(" "),a("p",[a("img",{attrs:{src:s(454),alt:"image.png"}})]),t._v(" "),a("h1",{attrs:{id:"综合案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#综合案例"}},[t._v("#")]),t._v(" 综合案例")]),t._v(" "),a("p",[t._v("需求：记录当前页面的刷新次数和刷新时的时间，每次刷新都自动自增一次，并显示到页面中，要求用TypeScript实现")]),t._v(" "),a("p",[a("img",{attrs:{src:s(455),alt:"image.png"}}),t._v("\n核心思路")]),t._v(" "),a("ol",[a("li",[t._v("从本地获取到当前最新列表，取出当前列表中的最后一条记录")]),t._v(" "),a("li",[t._v("在最后一条记录的基础上把次数加一,重新把次数和当前时间添加到列表的尾部")]),t._v(" "),a("li",[t._v("把最新列表渲染到页面")]),t._v(" "),a("li",[t._v("把最新列表再次存入本地")])])])}),[],!1,null,null,null);a.default=_.exports}}]);